{"ast":null,"code":"// user.redux.js\nimport axios from 'axios'; // 用axios做请求\n// 定义常量\n\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS'; // 注册成功\n\nconst TODO_ERRSHOW = 'TODO_ERRSHOW'; // 操作失败\n// state初始值\n\nlet initState = {\n  redirectTo: '',\n  // 完成之后跳到哪里\n  username: '',\n  // 账号\n  pwd: '',\n  // 密码\n  pwdConfirm: '',\n  // 确认密码\n  type: '',\n  // 用户类型\n  msg: '',\n  // 错误消息\n  isLogin: false // 是否登录\n\n};\nexport function user(state = initState, action) {\n  switch (action.type) {\n    case REGISTER_SUCCESS:\n      return { ...state,\n        ...action.data,\n        msg: '',\n        redirectTo: '/login'\n      };\n\n    case TODO_ERRSHOW:\n      return { ...state,\n        msg: action.msg\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction registerFail(msg) {\n  return {\n    msg,\n    type: TODO_ERRSHOW\n  };\n}\n\nfunction registerSuccess(data) {\n  return {\n    data,\n    type: REGISTER_SUCCESS\n  };\n}\n\nexport function getUserInfo(userInfo) {\n  return {\n    type: GET_USER_INFO,\n    payload: userInfo\n  };\n} //login\n\nexport function login({\n  username,\n  pwd\n}) {\n  if (!username || !pwd) {\n    return toDoFail('账号密码不能为空');\n  }\n\n  return dispatch => {\n    axios.post('/user/login', {\n      username,\n      pwd\n    }).then(res => {\n      if (res.status === 200 && res.data.code === 0) {\n        dispatch(loginSuccess(res.data.data));\n      } else {\n        dispatch(toDoFail(res.data.msg));\n      }\n    });\n  };\n} // register是一个action creator ，返回的action供user这个reducer使用，从而改变state\n\nexport function register({\n  username,\n  pwd,\n  pwdConfirm,\n  type\n}) {\n  if (!username || !pwd) {\n    registerFail('账号密码不能为空');\n  }\n\n  if (pwd !== pwdConfirm) {\n    registerFail('两次密码不一致');\n  }\n\n  return dispatch => {\n    axios.post('/user/register', {\n      username,\n      pwd,\n      type\n    }).then(res => {\n      if (res.status === 200 && res.data.code === 0) {\n        dispatch(registerSuccess(res.data.data));\n      } else {\n        dispatch(registerFail(res.data.msg));\n      }\n    });\n  };\n}\nexport function loginOut() {\n  return dispatch => {\n    axios.get('/user/loginOut').then(res => {\n      if (res.status === 200 && res.data.code === 0) {\n        dispatch(loginOutSuccess(res.data.data));\n      } else {\n        dispatch(toDoFail(res.data.msg));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/loki/feature1/Handy-Booking-Management-System/src/redux/user.redux.js"],"names":["axios","REGISTER_SUCCESS","TODO_ERRSHOW","initState","redirectTo","username","pwd","pwdConfirm","type","msg","isLogin","user","state","action","data","registerFail","registerSuccess","getUserInfo","userInfo","GET_USER_INFO","payload","login","toDoFail","dispatch","post","then","res","status","code","loginSuccess","register","loginOut","get","loginOutSuccess"],"mappings":"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","sourcesContent":["// user.redux.js\nimport axios from 'axios'  // 用axios做请求\n\n// 定义常量\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS'; // 注册成功\nconst TODO_ERRSHOW = 'TODO_ERRSHOW'; // 操作失败\n\n// state初始值\nlet initState = {\n    redirectTo: '', // 完成之后跳到哪里\n    username: '', // 账号\n    pwd: '', // 密码\n    pwdConfirm: '', // 确认密码\n    type: '', // 用户类型\n    msg: '', // 错误消息\n    isLogin: false // 是否登录\n}\n\nexport function user(state=initState,action) {\n    switch (action.type) {\n       case REGISTER_SUCCESS:\n            return {...state,...action.data, msg: '', redirectTo: '/login'}\n       case TODO_ERRSHOW:\n            return {...state,msg: action.msg}\n       default:\n            return state;\n    }\n}\n\nfunction registerFail(msg) {\n    return {\n        msg,\n        type: TODO_ERRSHOW\n    }\n}\n\nfunction registerSuccess(data) {\n    return {\n        data,\n        type: REGISTER_SUCCESS\n    }\n}\nexport function getUserInfo(userInfo) {\n    return {\n        type: GET_USER_INFO,\n        payload: userInfo\n    }    \n}\n//login\nexport function login({username,pwd}) {\n    if(!username || !pwd) {\n        return toDoFail('账号密码不能为空')\n    }\n    return dispatch => {\n        axios.post('/user/login',{username,pwd})\n            .then(res => {\n                if(res.status === 200 && res.data.code === 0) {\n                    dispatch(loginSuccess(res.data.data))\n                }else {\n                    dispatch(toDoFail(res.data.msg))\n                }\n            })\n    }\n}\n// register是一个action creator ，返回的action供user这个reducer使用，从而改变state\nexport function register({username,pwd,pwdConfirm,type}) {\n    if(!username || !pwd) {\n        registerFail('账号密码不能为空')\n    }\n    if(pwd !== pwdConfirm) {\n        registerFail('两次密码不一致')\n    }\n    return dispatch => {\n        axios.post('/user/register',{username,pwd,type})\n            .then(res => {\n                if(res.status === 200 && res.data.code === 0) {\n                    dispatch(registerSuccess(res.data.data))\n                }else {\n                    dispatch(registerFail(res.data.msg))\n                }\n            })\n    }\n}\nexport function loginOut() {\n    return dispatch => {\n        axios.get('/user/loginOut')\n                .then(res => {\n                if (res.status === 200 && res.data.code === 0) {\n                    dispatch(loginOutSuccess(res.data.data))\n                } else {\n                    dispatch(toDoFail(res.data.msg))\n                }\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}