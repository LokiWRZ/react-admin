{"ast":null,"code":"import axios from 'axios';\nimport { getRedirectPath } from '../util';\nconst AUTH_SUCCESS = 'AUTH_SUCCESS';\nconst LOGOUT = 'LOGOUT';\nconst ERROR_MSG = 'ERROR_MSG';\nconst LOAD_DATA = 'LOAD_DATA';\nconst initState = {\n  redirectTo: '',\n  msg: '',\n  user: '',\n  type: ''\n}; // reducer\n\nexport function user(state = initState, action) {\n  switch (action.type) {\n    case AUTH_SUCCESS:\n      return { ...state,\n        msg: '',\n        redirectTo: getRedirectPath(action.payload),\n        ...action.payload\n      };\n\n    case LOAD_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    case ERROR_MSG:\n      return { ...state,\n        isAuth: false,\n        msg: action.msg\n      };\n\n    case LOGOUT:\n      return { ...initState,\n        redirectTo: '/login'\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction authSuccess(obj) {\n  const {\n    pwd,\n    ...data\n  } = obj;\n  return {\n    type: AUTH_SUCCESS,\n    payload: data\n  };\n}\n\nfunction errorMsg(msg) {\n  return {\n    msg,\n    type: ERROR_MSG\n  };\n}\n\nexport function loadData(userinfo) {\n  return {\n    type: LOAD_DATA,\n    payload: userinfo\n  };\n}\nexport function logoutSubmit() {\n  return {\n    type: LOGOUT\n  };\n}\nexport function update(data) {\n  return dispatch => {\n    axios.post('/user/update', data).then(res => {\n      if (res.status == 200 && res.data.code === 0) {\n        dispatch(authSuccess(res.data.data));\n      } else {\n        dispatch(errorMsg(res.data.msg));\n      }\n    });\n  };\n}\nexport function login({\n  user,\n  pwd\n}) {\n  if (!user || !pwd) {\n    return errorMsg('用户密码必须输入');\n  }\n\n  return dispatch => {\n    axios.post('/user/login', {\n      user,\n      pwd\n    }).then(res => {\n      if (res.status == 200 && res.data.code === 0) {\n        dispatch(authSuccess(res.data.data));\n      } else {\n        dispatch(errorMsg(res.data.msg));\n      }\n    });\n  };\n}\nexport function regisger({\n  user,\n  pwd,\n  repeatpwd,\n  type\n}) {\n  if (!user || !pwd || !type) {\n    return errorMsg('用户名密码必须输入');\n  }\n\n  if (pwd !== repeatpwd) {\n    return errorMsg('密码和确认密码不同');\n  }\n\n  return dispatch => {\n    axios.post('/user/register', {\n      user,\n      pwd,\n      type\n    }).then(res => {\n      if (res.status == 200 && res.data.code === 0) {\n        dispatch(authSuccess({\n          user,\n          pwd,\n          type\n        }));\n      } else {\n        dispatch(errorMsg(res.data.msg));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/loki/feature1/Handy-Booking-Management-System/src/redux/user.redux.js"],"names":["axios","getRedirectPath","AUTH_SUCCESS","LOGOUT","ERROR_MSG","LOAD_DATA","initState","redirectTo","msg","user","type","state","action","payload","isAuth","authSuccess","obj","pwd","data","errorMsg","loadData","userinfo","logoutSubmit","update","dispatch","post","then","res","status","code","login","regisger","repeatpwd"],"mappings":"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","sourcesContent":["\nimport axios from 'axios'\nimport {getRedirectPath} from '../util'\n\nconst AUTH_SUCCESS = 'AUTH_SUCCESS'\nconst LOGOUT = 'LOGOUT'\nconst ERROR_MSG = 'ERROR_MSG'\nconst LOAD_DATA = 'LOAD_DATA'\nconst initState={\n\tredirectTo:'',\n\tmsg:'',\n\tuser:'',\n\ttype:''\n}\n// reducer\nexport function user(state=initState, action){\n\tswitch(action.type){\n\t\tcase AUTH_SUCCESS:\n\t\t\treturn {...state, msg:'',redirectTo:getRedirectPath(action.payload),...action.payload}\n\t\tcase LOAD_DATA:\n\t\t\treturn {...state, ...action.payload}\n\t\tcase ERROR_MSG:\n\t\t\treturn {...state, isAuth:false, msg:action.msg}\n\t\tcase LOGOUT:\n\t\t\treturn {...initState,redirectTo:'/login'}\n\t\tdefault:\n\t\t\treturn state\n\t}\n} \n\nfunction authSuccess(obj){\n\tconst {pwd,...data} = obj\n\treturn {type: AUTH_SUCCESS, payload:data}\n}\n\nfunction errorMsg(msg){\n\treturn { msg, type:ERROR_MSG }\n}\n\nexport function loadData(userinfo){\n\treturn { type:LOAD_DATA, payload:userinfo}\n}\nexport function logoutSubmit(){\n\treturn { type:LOGOUT }\n}\nexport function update(data){\n\treturn dispatch=>{\n\t\taxios.post('/user/update',data)\n\t\t\t.then(res=>{\n\t\t\t\tif (res.status==200&&res.data.code===0) {\n\t\t\t\t\tdispatch(authSuccess(res.data.data))\n\t\t\t\t}else{\n\t\t\t\t\tdispatch(errorMsg(res.data.msg))\n\t\t\t\t}\n\t\t\t})\n\t}\n}\nexport function login({user,pwd}){\n\tif (!user||!pwd) {\n\t\treturn errorMsg('用户密码必须输入')\n\t}\n\treturn dispatch=>{\n\t\taxios.post('/user/login',{user,pwd})\n\t\t\t.then(res=>{\n\t\t\t\tif (res.status==200&&res.data.code===0) {\n\t\t\t\t\tdispatch(authSuccess(res.data.data))\n\t\t\t\t}else{\n\t\t\t\t\tdispatch(errorMsg(res.data.msg))\n\t\t\t\t}\n\t\t\t})\t\t\n\t}\n\n\n}\n\nexport function regisger({user,pwd,repeatpwd,type}){\n\tif (!user||!pwd||!type) {\n\t\treturn errorMsg('用户名密码必须输入')\n\t}\n\tif (pwd!==repeatpwd) {\n\t\treturn errorMsg('密码和确认密码不同')\n\t}\n\treturn dispatch=>{\n\t\taxios.post('/user/register',{user,pwd,type})\n\t\t\t.then(res=>{\n\t\t\t\tif (res.status==200&&res.data.code===0) {\n\t\t\t\t\tdispatch(authSuccess({user,pwd,type}))\n\t\t\t\t}else{\n\t\t\t\t\tdispatch(errorMsg(res.data.msg))\n\t\t\t\t}\n\t\t\t})\t\t\n\t}\n\n}\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}