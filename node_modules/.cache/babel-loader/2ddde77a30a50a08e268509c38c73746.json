{"ast":null,"code":"import _initializerDefineProperty from \"/Users/loki/feature1/Handy-Booking-Management-System/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/loki/feature1/Handy-Booking-Management-System/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/loki/feature1/Handy-Booking-Management-System/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { observable, action } from 'mobx';\nimport { isAuthenticated, authenticateSuccess, logout } from '../utils/Session';\nlet AppStore = (_class = (_temp = class AppStore {\n  constructor() {\n    _initializerDefineProperty(this, \"isLogin\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"users\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"loginUser\", _descriptor3, this);\n  }\n\n  //当前登录用户信息\n  toggleLogin(flag, info = {}) {\n    this.loginUser = info; //设置登录用户信息\n\n    if (flag) {\n      authenticateSuccess(info.username);\n      this.isLogin = true;\n    } else {\n      logout();\n      this.isLogin = false;\n    }\n  }\n\n  initUsers() {\n    const localUsers = localStorage['users'] ? JSON.parse(localStorage['users']) : [];\n    this.users = [{\n      username: 'admin',\n      password: 'admin'\n    }, ...localUsers];\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"isLogin\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return !!isAuthenticated();\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"users\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"loginUser\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"toggleLogin\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"toggleLogin\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"initUsers\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"initUsers\"), _class.prototype)), _class);\nexport default new AppStore();","map":{"version":3,"sources":["/Users/loki/feature1/Handy-Booking-Management-System/src/store/appStore.js"],"names":["observable","action","isAuthenticated","authenticateSuccess","logout","AppStore","toggleLogin","flag","info","loginUser","username","isLogin","initUsers","localUsers","localStorage","JSON","parse","users","password"],"mappings":";;;;;;AAAA,SAAQA,UAAR,EAAoBC,MAApB,QAAiC,MAAjC;AACA,SAAQC,eAAR,EAAwBC,mBAAxB,EAA4CC,MAA5C,QAAyD,kBAAzD;IAEMC,Q,sBAAN,MAAMA,QAAN,CAAe;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAGe;AAEpBC,EAAAA,WAAR,CAAoBC,IAApB,EAAyBC,IAAI,GAAC,EAA9B,EAAkC;AAChC,SAAKC,SAAL,GAAiBD,IAAjB,CADgC,CACT;;AACvB,QAAID,IAAJ,EAAU;AACRJ,MAAAA,mBAAmB,CAACK,IAAI,CAACE,QAAN,CAAnB;AACA,WAAKC,OAAL,GAAe,IAAf;AACD,KAHD,MAGO;AACLP,MAAAA,MAAM;AACN,WAAKO,OAAL,GAAe,KAAf;AACD;AAEF;;AACOC,EAAAA,SAAR,GAAoB;AAClB,UAAMC,UAAU,GAAGC,YAAY,CAAC,OAAD,CAAZ,GAAsBC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAAC,OAAD,CAAvB,CAAtB,GAAwD,EAA3E;AACA,SAAKG,KAAL,GAAa,CAAC;AAACP,MAAAA,QAAQ,EAAE,OAAX;AAAoBQ,MAAAA,QAAQ,EAAE;AAA9B,KAAD,EAAwC,GAAGL,UAA3C,CAAb;AACD;;AAnBY,C,iFACZb,U;;;;;WAAqB,CAAC,CAACE,eAAe,E;;yEACtCF,U;;;;;WAAmB,E;;6EACnBA,U;;;;;WAAuB,E;;gEAEvBC,M,kJAWAA,M;AAMH,eAAe,IAAII,QAAJ,EAAf","sourcesContent":["import {observable, action} from 'mobx'\nimport {isAuthenticated,authenticateSuccess,logout} from '../utils/Session'\n\nclass AppStore {\n  @observable isLogin = !!isAuthenticated()  //利用cookie来判断用户是否登录，避免刷新页面后登录状态丢失\n  @observable users = []  //模拟用户数据库\n  @observable loginUser = {}  //当前登录用户信息\n\n  @action toggleLogin(flag,info={}) {\n    this.loginUser = info  //设置登录用户信息\n    if (flag) {\n      authenticateSuccess(info.username)\n      this.isLogin = true\n    } else {\n      logout()\n      this.isLogin = false\n    }\n\n  }\n  @action initUsers() {\n    const localUsers = localStorage['users']?JSON.parse(localStorage['users']):[]\n    this.users = [{username: 'admin', password: 'admin'},...localUsers]\n  }\n}\n\nexport default new AppStore()"]},"metadata":{},"sourceType":"module"}