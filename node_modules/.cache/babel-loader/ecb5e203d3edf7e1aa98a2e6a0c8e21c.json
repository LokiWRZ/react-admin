{"ast":null,"code":"function accMul(arg1, arg2) {\n  let m = 0;\n  const s1 = arg1.toString();\n  const s2 = arg2.toString();\n  m += s1.split(\".\").length > 1 ? s1.split(\".\")[1].length : 0;\n  m += s2.split(\".\").length > 1 ? s2.split(\".\")[1].length : 0;\n  return Number(s1.replace(\".\", \"\")) * Number(s2.replace(\".\", \"\")) / 10 ** m;\n}\n\nexport function digitUppercase(n) {\n  const fraction = ['角', '分'];\n  const digit = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'];\n  const unit = [['元', '万', '亿'], ['', '拾', '佰', '仟', '万']];\n  let num = Math.abs(n);\n  let s = '';\n  fraction.forEach((item, index) => {\n    s += (digit[Math.floor(accMul(num, 10 * 10 ** index)) % 10] + item).replace(/零./, '');\n  });\n  s = s || '整';\n  num = Math.floor(num);\n\n  for (let i = 0; i < unit[0].length && num > 0; i += 1) {\n    let p = '';\n\n    for (let j = 0; j < unit[1].length && num > 0; j += 1) {\n      p = digit[num % 10] + unit[1][j] + p;\n      num = Math.floor(num / 10);\n    }\n\n    s = p.replace(/(零.)*零$/, '').replace(/^$/, '零') + unit[0][i] + s;\n  }\n\n  return s.replace(/(零.)*零元/, '元').replace(/(零.)+/g, '零').replace(/^整$/, '零元整');\n}\n/**\n * 生成指定区间的随机整数\n * @param min\n * @param max\n * @returns {number}\n */\n\nexport function randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n/**\n * 计算提示框的宽度\n * @param str\n * @returns {number}\n */\n\nexport function calculateWidth(arr) {\n  return 30 + arr[0].length * 15;\n}\n/**\n * 图片预加载\n * @param arr\n * @constructor\n */\n\nexport function preloadingImages(arr) {\n  arr.forEach(item => {\n    const img = new Image();\n    img.src = item;\n  });\n}","map":{"version":3,"sources":["/Users/loki/feature1/Handy-Booking-Management-System/src/utils/utils.js"],"names":["accMul","arg1","arg2","m","s1","toString","s2","split","length","Number","replace","digitUppercase","n","fraction","digit","unit","num","Math","abs","s","forEach","item","index","floor","i","p","j","randomNum","min","max","random","calculateWidth","arr","preloadingImages","img","Image","src"],"mappings":"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","sourcesContent":["function accMul(arg1, arg2) {\n  let m = 0;\n  const s1 = arg1.toString();\n  const s2 = arg2.toString();\n  m += s1.split(\".\").length > 1 ? s1.split(\".\")[1].length : 0;\n  m += s2.split(\".\").length > 1 ? s2.split(\".\")[1].length : 0;\n  return Number(s1.replace(\".\", \"\")) * Number(s2.replace(\".\", \"\")) / 10 ** m;\n}\n\nexport function digitUppercase(n) {\n  const fraction = ['角', '分'];\n  const digit = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'];\n  const unit = [['元', '万', '亿'], ['', '拾', '佰', '仟', '万']];\n  let num = Math.abs(n);\n  let s = '';\n  fraction.forEach((item, index) => {\n    s += (digit[Math.floor(accMul(num, 10 * 10 ** index)) % 10] + item).replace(/零./, '');\n  });\n  s = s || '整';\n  num = Math.floor(num);\n  for (let i = 0; i < unit[0].length && num > 0; i += 1) {\n    let p = '';\n    for (let j = 0; j < unit[1].length && num > 0; j += 1) {\n      p = digit[num % 10] + unit[1][j] + p;\n      num = Math.floor(num / 10);\n    }\n    s = p.replace(/(零.)*零$/, '').replace(/^$/, '零') + unit[0][i] + s;\n  }\n\n  return s\n    .replace(/(零.)*零元/, '元')\n    .replace(/(零.)+/g, '零')\n    .replace(/^整$/, '零元整');\n}\n\n\n/**\n * 生成指定区间的随机整数\n * @param min\n * @param max\n * @returns {number}\n */\nexport function randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n/**\n * 计算提示框的宽度\n * @param str\n * @returns {number}\n */\nexport function calculateWidth(arr){\n  return 30 + arr[0].length*15\n}\n\n/**\n * 图片预加载\n * @param arr\n * @constructor\n */\nexport function preloadingImages(arr) {\n  arr.forEach(item=>{\n    const img = new Image()\n    img.src = item\n  })\n}"]},"metadata":{},"sourceType":"module"}