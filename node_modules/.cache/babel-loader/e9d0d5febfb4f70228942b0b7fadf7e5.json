{"ast":null,"code":"import axios from 'axios';\nimport io from 'socket.io-client'; //连接数据库\n\nconst socket = io('ws://localhost:9093'); //获取聊天列表\n\nconst MSG_LIST = 'MSG_LIST'; //读取信息\n\nconst MSG_RECV = 'MSG_RECV'; //标识已读\n\nconst MSG_READ = 'MSG_READ';\nconst initState = {\n  chatmsg: [],\n  // users:{},\n  unread: 0\n};\nexport function chat(state = initState, action) {\n  switch (action.type) {\n    case MSG_LIST:\n      //未读过滤条件，接收方为当前登录用户\n      return { ...state,\n        users: action.payload.users,\n        chatmsg: action.payload.msgs,\n        unread: action.payload.msgs.filter(v => !v.read && v.to === action.payload.userid).length\n      };\n\n    case MSG_RECV:\n      //当接收信息的时候，判断当前信息发送到的对象是否是当前用户，是当前用户的话未读数+1，否则不加\n      const n = action.payload.to === action.userid ? 1 : 0;\n      return { ...state,\n        chatmsg: [...state.chatmsg, action.payload],\n        unread: state.unread + n\n      };\n\n    case MSG_READ:\n      const {\n        from,\n        num\n      } = action.payload;\n      return { ...state,\n        chatmsg: state.chatmsg.map(v => ({ ...v,\n          read: from == v.from ? true : v.read\n        })),\n        unread: state.unread - num\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction msgList(msgs, users, userid) {\n  return {\n    type: MSG_LIST,\n    payload: {\n      msgs,\n      users,\n      userid\n    }\n  };\n} //接收消息\n\n\nfunction msgRecv(msg, userid) {\n  return {\n    type: MSG_RECV,\n    payload: msg,\n    userid\n  };\n}\n\nfunction msgRead({\n  from,\n  userid,\n  num\n}) {\n  return {\n    type: MSG_READ,\n    payload: {\n      from,\n      userid,\n      num\n    }\n  };\n}\n\nexport function readMsg(from) {\n  return (dispatch, getState) => {\n    axios.post('/user/readmsg', {\n      from\n    }).then(res => {\n      console.log(\"chat.redux-->res\", res);\n\n      const userid = getState().user._id;\n\n      if (res.status === 200 && res.data.code === 0) {\n        dispatch(msgRead({\n          userid,\n          from,\n          num: res.data.num\n        }));\n      }\n    });\n  };\n} //获取聊天信息列表\n\nexport function getMsgList() {\n  //getState参数可以获取当前redux中的所有信息\n  return (dispatch, getState) => {\n    axios.get('/user/getmsgList').then(res => {\n      if (res.status === 200 && res.data.code === 0) {\n        // console.log(\"caht.redux.js--->getMsgList-->state\",getState())\n        // console.log(\"caht.redux.js--->getMsgList-->res\",res)\n        //当前登录用户\n        const userid = getState().user._id;\n\n        dispatch(msgList(res.data.msgs, res.data.users, userid));\n      }\n    });\n  };\n} //接收消息\n\nexport function recvMsg() {\n  return (dispatch, getState) => {\n    socket.on('recvmsg', function (data) {\n      // console.log('recvmsg',data);\n      const userid = getState().user._id;\n\n      dispatch(msgRecv(data, userid));\n    });\n  };\n} //发送消息\n\nexport function sendMsg({\n  from,\n  to,\n  msg\n}) {\n  return dispatch => {\n    socket.emit('sendmsg', {\n      from,\n      to,\n      msg\n    });\n  };\n}","map":{"version":3,"sources":["/Users/loki/feature1/Handy-Booking-Management-System/src/redux/chat.redux.js"],"names":["axios","io","socket","MSG_LIST","MSG_RECV","MSG_READ","initState","chatmsg","unread","chat","state","action","type","users","payload","msgs","filter","v","read","to","userid","length","n","from","num","map","msgList","msgRecv","msg","msgRead","readMsg","dispatch","getState","post","then","res","console","log","user","_id","status","data","code","getMsgList","get","recvMsg","on","sendMsg","emit"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport io from 'socket.io-client'\n//连接数据库\nconst socket = io('ws://localhost:9093')\n\n//获取聊天列表\nconst MSG_LIST = 'MSG_LIST'\n//读取信息\nconst MSG_RECV = 'MSG_RECV'\n//标识已读\nconst MSG_READ = 'MSG_READ'\n\nconst initState = {\n    chatmsg:[],\n    // users:{},\n    unread:0\n}\n\nexport function chat(state=initState,action){\n    switch(action.type){\n        case MSG_LIST:\n            //未读过滤条件，接收方为当前登录用户\n            return {...state,users:action.payload.users,chatmsg:action.payload.msgs,unread:action.payload.msgs.filter(v=>!v.read&&v.to===action.payload.userid).length}\n        case MSG_RECV:\n            //当接收信息的时候，判断当前信息发送到的对象是否是当前用户，是当前用户的话未读数+1，否则不加\n            const n = action.payload.to === action.userid?1:0\n            return {...state,chatmsg:[...state.chatmsg,action.payload],unread:state.unread+n}\n        case MSG_READ:\n            const {from,num} = action.payload\n            return {...state,chatmsg:state.chatmsg.map(v=>({...v,read:from==v.from?true:v.read})),unread:state.unread-num}\n        default:\n            return state\n    }\n}\n\nfunction msgList(msgs,users,userid){\n    return {type:MSG_LIST,payload:{msgs,users,userid}}\n}\n\n//接收消息\nfunction msgRecv(msg,userid){\n\treturn {type:MSG_RECV, payload:msg,userid}\n}\n\nfunction msgRead({from,userid,num}){\n    return {type:MSG_READ,payload:{from,userid,num}}\n}\n\nexport function readMsg(from){\n    return (dispatch,getState)=>{\n        axios.post('/user/readmsg',{from})\n            .then(res=>{\n                console.log(\"chat.redux-->res\",res);\n                \n                const userid = getState().user._id\n                if(res.status===200 && res.data.code===0){\n                    dispatch(msgRead({userid,from,num:res.data.num}))\n                }\n            })\n    }\n}\n\n//获取聊天信息列表\nexport function getMsgList(){\n    //getState参数可以获取当前redux中的所有信息\n    return (dispatch,getState)=>{\n        axios.get('/user/getmsgList')\n                .then(res=>{\n                    if(res.status===200 && res.data.code===0){\n                        // console.log(\"caht.redux.js--->getMsgList-->state\",getState())\n                        // console.log(\"caht.redux.js--->getMsgList-->res\",res)\n                        //当前登录用户\n                        const userid = getState().user._id\n                        dispatch(msgList(res.data.msgs,res.data.users,userid))\n                    }\n                })\n    }\n}\n//接收消息\nexport function recvMsg(){\n    return (dispatch,getState)=>{\n        socket.on('recvmsg',function(data){\n            // console.log('recvmsg',data);\n            const userid = getState().user._id\n            dispatch(msgRecv(data,userid))\n        })\n    }\n}\n//发送消息\nexport function sendMsg({from ,to ,msg}){\n\treturn dispatch=>{\n\t\tsocket.emit('sendmsg',{from ,to ,msg})\n\t}\n\t\n}"]},"metadata":{},"sourceType":"module"}