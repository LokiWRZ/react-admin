{"ast":null,"code":"// user.redux.js\nimport axios from 'axios'; // 用axios做请求\n\nimport { getRedirectPath } from '../utils'; // 定义常量\n\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS'; // 注册成功\n\nconst TODO_ERRSHOW = 'TODO_ERRSHOW'; // 操作失败\n\nconst GET_USER_INFO = 'GET_USER_INFO';\nconst toDoFail = 'toDoFail';\nconst LoginSuccess = 'LoginSuccess';\nconst LogOutSuccess = 'LogOutSuccess'; // state初始值\n\nconst initState = {\n  redirectTo: '',\n  // 完成之后跳到哪里\n  user: '',\n  // 账号\n  pwd: '',\n  // 密码\n  pwdConfirm: '',\n  // 确认密码\n  type: '',\n  // 用户类型\n  msg: '',\n  // 错误消息\n  isLogin: false // \n\n};\nexport function user(state = initState, action) {\n  switch (action.type) {\n    case LoginSuccess:\n      return { ...state,\n        msg: '',\n        redirectTo: getRedirectPath(action.payload),\n        isLogin: true,\n        ...action.payload\n      };\n\n    case REGISTER_SUCCESS:\n      return { ...state,\n        msg: '',\n        redirectTo: getRedirectPath(action.payload),\n        isLogin: true,\n        ...action.payload\n      };\n\n    case GET_USER_INFO:\n      return { ...state,\n        ...action.payload\n      };\n\n    case LogOutSuccess:\n      return { ...initState,\n        redirectTo: '/login'\n      };\n\n    case TODO_ERRSHOW:\n      return { ...state,\n        isLogin: false,\n        msg: action.msg\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction loginSuccess(obj) {\n  const {\n    pwd,\n    ...data\n  } = obj;\n  return {\n    type: LoginSuccess,\n    payload: data\n  };\n}\n\nfunction logOutSuccess() {\n  return {\n    type: LogOutSuccess\n  };\n}\n\nfunction registerFail(msg) {\n  return {\n    msg,\n    type: TODO_ERRSHOW\n  };\n}\n\nfunction errorMsg(msg) {\n  return {\n    msg,\n    type: toDoFail\n  };\n}\n\nfunction registerSuccess(data) {\n  return {\n    data,\n    type: REGISTER_SUCCESS\n  };\n}\n\nexport function getUserInfo(userInfo) {\n  return {\n    type: GET_USER_INFO,\n    payload: userInfo\n  };\n}\nexport function update(data) {\n  return dispatch => {\n    axios.post('/user/update', data).then(res => {\n      if (res.status == 200 && res.data.code === 0) {\n        dispatch(loginSuccess(res.data.data));\n      } else {\n        dispatch(errorMsg(res.data.msg));\n      }\n    });\n  };\n} //login\n\nexport function login({\n  user,\n  pwd\n}) {\n  if (!user || !pwd) {\n    return errorMsg('账号密码不能为空');\n  }\n\n  return dispatch => {\n    axios.post('/user/login', {\n      user,\n      pwd\n    }).then(res => {\n      if (res.status === 200 && res.data.code === 0) {\n        dispatch(loginSuccess(res.data.data));\n      } else {\n        dispatch(toDoFail(res.data.msg));\n      }\n    });\n  };\n} // register是一个action creator ，返回的action供user这个reducer使用，从而改变state\n\nexport function register({\n  user,\n  pwd,\n  pwdConfirm,\n  type\n}) {\n  if (!user || !pwd || !type) {\n    registerFail('账号密码不能为空');\n  }\n\n  if (pwd !== pwdConfirm) {\n    registerFail('两次密码不一致');\n  }\n\n  return dispatch => {\n    axios.post('/user/register', {\n      user,\n      pwd,\n      type\n    }).then(res => {\n      if (res.status === 200 && res.data.code === 0) {\n        dispatch(registerSuccess(res.data.data));\n      } else {\n        dispatch(registerFail(res.data.msg));\n      }\n    });\n  };\n}\nexport function logOut() {\n  return dispatch => {\n    axios.get('/user/logOut').then(res => {\n      if (res.status === 200 && res.data.code === 0) {\n        dispatch(logOutSuccess(res.data.data));\n      } else {\n        dispatch(toDoFail(res.data.msg));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/loki/feature1/Handy-Booking-Management-System/src/redux/user.redux.js"],"names":["axios","getRedirectPath","REGISTER_SUCCESS","TODO_ERRSHOW","GET_USER_INFO","toDoFail","LoginSuccess","LogOutSuccess","initState","redirectTo","user","pwd","pwdConfirm","type","msg","isLogin","state","action","payload","loginSuccess","obj","data","logOutSuccess","registerFail","errorMsg","registerSuccess","getUserInfo","userInfo","update","dispatch","post","then","res","status","code","login","register","logOut","get"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA2B;;AAC3B,SAAQC,eAAR,QAA8B,UAA9B,C,CAEA;;AACA,MAAMC,gBAAgB,GAAG,kBAAzB,C,CAA6C;;AAC7C,MAAMC,YAAY,GAAG,cAArB,C,CAAqC;;AACrC,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,aAAa,GAAE,eAArB,C,CAEA;;AACA,MAAMC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,EADE;AACE;AAChBC,EAAAA,IAAI,EAAE,EAFQ;AAEJ;AACVC,EAAAA,GAAG,EAAE,EAHS;AAGL;AACTC,EAAAA,UAAU,EAAE,EAJE;AAIE;AAChBC,EAAAA,IAAI,EAAE,EALQ;AAKJ;AACVC,EAAAA,GAAG,EAAE,EANS;AAML;AACTC,EAAAA,OAAO,EAAE,KAPK,CAOC;;AAPD,CAAlB;AAUA,OAAO,SAASL,IAAT,CAAcM,KAAK,GAACR,SAApB,EAA8BS,MAA9B,EAAsC;AACzC,UAAQA,MAAM,CAACJ,IAAf;AACG,SAAKP,YAAL;AACK,aAAO,EAAC,GAAGU,KAAJ;AAAWF,QAAAA,GAAG,EAAC,EAAf;AAAkBL,QAAAA,UAAU,EAACR,eAAe,CAACgB,MAAM,CAACC,OAAR,CAA5C;AAA6DH,QAAAA,OAAO,EAAC,IAArE;AAA0E,WAAGE,MAAM,CAACC;AAApF,OAAP;;AACL,SAAKhB,gBAAL;AACK,aAAO,EAAC,GAAGc,KAAJ;AAAWF,QAAAA,GAAG,EAAC,EAAf;AAAkBL,QAAAA,UAAU,EAACR,eAAe,CAACgB,MAAM,CAACC,OAAR,CAA5C;AAA6DH,QAAAA,OAAO,EAAC,IAArE;AAA0E,WAAGE,MAAM,CAACC;AAApF,OAAP;;AACL,SAAKd,aAAL;AACI,aAAO,EAAC,GAAGY,KAAJ;AAAU,WAAGC,MAAM,CAACC;AAApB,OAAP;;AACJ,SAAKX,aAAL;AACF,aAAO,EAAC,GAAGC,SAAJ;AAAcC,QAAAA,UAAU,EAAC;AAAzB,OAAP;;AACE,SAAKN,YAAL;AACK,aAAO,EAAC,GAAGa,KAAJ;AAAWD,QAAAA,OAAO,EAAC,KAAnB;AAA0BD,QAAAA,GAAG,EAACG,MAAM,CAACH;AAArC,OAAP;;AACL;AACK,aAAOE,KAAP;AAZR;AAcH;;AACD,SAASG,YAAT,CAAsBC,GAAtB,EAA0B;AACzB,QAAM;AAACT,IAAAA,GAAD;AAAK,OAAGU;AAAR,MAAgBD,GAAtB;AACA,SAAO;AAACP,IAAAA,IAAI,EAAEP,YAAP;AAAqBY,IAAAA,OAAO,EAACG;AAA7B,GAAP;AACA;;AACD,SAASC,aAAT,GAAwB;AACpB,SAAO;AAAET,IAAAA,IAAI,EAACN;AAAP,GAAP;AACH;;AACD,SAASgB,YAAT,CAAsBT,GAAtB,EAA2B;AACvB,SAAO;AACHA,IAAAA,GADG;AAEHD,IAAAA,IAAI,EAAEV;AAFH,GAAP;AAIH;;AACD,SAASqB,QAAT,CAAkBV,GAAlB,EAAsB;AAClB,SAAO;AACHA,IAAAA,GADG;AAEHD,IAAAA,IAAI,EAACR;AAFF,GAAP;AAIH;;AAED,SAASoB,eAAT,CAAyBJ,IAAzB,EAA+B;AAC3B,SAAO;AACHA,IAAAA,IADG;AAEHR,IAAAA,IAAI,EAAEX;AAFH,GAAP;AAIH;;AACD,OAAO,SAASwB,WAAT,CAAqBC,QAArB,EAA+B;AAClC,SAAO;AACHd,IAAAA,IAAI,EAAET,aADH;AAEHc,IAAAA,OAAO,EAAES;AAFN,GAAP;AAIH;AACD,OAAO,SAASC,MAAT,CAAgBP,IAAhB,EAAqB;AAC3B,SAAOQ,QAAQ,IAAE;AAChB7B,IAAAA,KAAK,CAAC8B,IAAN,CAAW,cAAX,EAA0BT,IAA1B,EACEU,IADF,CACOC,GAAG,IAAE;AACV,UAAIA,GAAG,CAACC,MAAJ,IAAY,GAAZ,IAAiBD,GAAG,CAACX,IAAJ,CAASa,IAAT,KAAgB,CAArC,EAAwC;AACvCL,QAAAA,QAAQ,CAACV,YAAY,CAACa,GAAG,CAACX,IAAJ,CAASA,IAAV,CAAb,CAAR;AACA,OAFD,MAEK;AACJQ,QAAAA,QAAQ,CAACL,QAAQ,CAACQ,GAAG,CAACX,IAAJ,CAASP,GAAV,CAAT,CAAR;AACA;AACD,KAPF;AAQA,GATD;AAUA,C,CACD;;AACA,OAAO,SAASqB,KAAT,CAAe;AAACzB,EAAAA,IAAD;AAAMC,EAAAA;AAAN,CAAf,EAA2B;AAC9B,MAAG,CAACD,IAAD,IAAS,CAACC,GAAb,EAAkB;AACd,WAAOa,QAAQ,CAAC,UAAD,CAAf;AACH;;AACD,SAAOK,QAAQ,IAAI;AACf7B,IAAAA,KAAK,CAAC8B,IAAN,CAAW,aAAX,EAAyB;AAACpB,MAAAA,IAAD;AAAMC,MAAAA;AAAN,KAAzB,EACKoB,IADL,CACUC,GAAG,IAAI;AACT,UAAGA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACX,IAAJ,CAASa,IAAT,KAAkB,CAA3C,EAA8C;AAC1CL,QAAAA,QAAQ,CAACV,YAAY,CAACa,GAAG,CAACX,IAAJ,CAASA,IAAV,CAAb,CAAR;AACH,OAFD,MAEM;AACFQ,QAAAA,QAAQ,CAACxB,QAAQ,CAAC2B,GAAG,CAACX,IAAJ,CAASP,GAAV,CAAT,CAAR;AACH;AACJ,KAPL;AAQH,GATD;AAUH,C,CACD;;AACA,OAAO,SAASsB,QAAT,CAAkB;AAAC1B,EAAAA,IAAD;AAAMC,EAAAA,GAAN;AAAUC,EAAAA,UAAV;AAAqBC,EAAAA;AAArB,CAAlB,EAA8C;AACjD,MAAG,CAACH,IAAD,IAAS,CAACC,GAAV,IAAgB,CAACE,IAApB,EAA0B;AACtBU,IAAAA,YAAY,CAAC,UAAD,CAAZ;AACH;;AACD,MAAGZ,GAAG,KAAKC,UAAX,EAAuB;AACnBW,IAAAA,YAAY,CAAC,SAAD,CAAZ;AACH;;AACD,SAAOM,QAAQ,IAAI;AACf7B,IAAAA,KAAK,CAAC8B,IAAN,CAAW,gBAAX,EAA4B;AAACpB,MAAAA,IAAD;AAAMC,MAAAA,GAAN;AAAUE,MAAAA;AAAV,KAA5B,EACKkB,IADL,CACUC,GAAG,IAAI;AACT,UAAGA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACX,IAAJ,CAASa,IAAT,KAAkB,CAA3C,EAA8C;AAC1CL,QAAAA,QAAQ,CAACJ,eAAe,CAACO,GAAG,CAACX,IAAJ,CAASA,IAAV,CAAhB,CAAR;AACH,OAFD,MAEM;AACFQ,QAAAA,QAAQ,CAACN,YAAY,CAACS,GAAG,CAACX,IAAJ,CAASP,GAAV,CAAb,CAAR;AACH;AACJ,KAPL;AAQH,GATD;AAUH;AACD,OAAO,SAASuB,MAAT,GAAkB;AACrB,SAAOR,QAAQ,IAAI;AACf7B,IAAAA,KAAK,CAACsC,GAAN,CAAU,cAAV,EACSP,IADT,CACcC,GAAG,IAAI;AACb,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACX,IAAJ,CAASa,IAAT,KAAkB,CAA5C,EAA+C;AAC3CL,QAAAA,QAAQ,CAACP,aAAa,CAACU,GAAG,CAACX,IAAJ,CAASA,IAAV,CAAd,CAAR;AACH,OAFD,MAEO;AACHQ,QAAAA,QAAQ,CAACxB,QAAQ,CAAC2B,GAAG,CAACX,IAAJ,CAASP,GAAV,CAAT,CAAR;AACH;AACJ,KAPL;AAQH,GATD;AAUH","sourcesContent":["// user.redux.js\nimport axios from 'axios'; // 用axios做请求\nimport {getRedirectPath} from '../utils';\n\n// 定义常量\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS'; // 注册成功\nconst TODO_ERRSHOW = 'TODO_ERRSHOW'; // 操作失败\nconst GET_USER_INFO = 'GET_USER_INFO';\nconst toDoFail = 'toDoFail';\nconst LoginSuccess = 'LoginSuccess';\nconst LogOutSuccess ='LogOutSuccess';\n\n// state初始值\nconst initState = {\n    redirectTo: '', // 完成之后跳到哪里\n    user: '', // 账号\n    pwd: '', // 密码\n    pwdConfirm: '', // 确认密码\n    type: '', // 用户类型\n    msg: '', // 错误消息\n    isLogin: false // \n}\n\nexport function user(state=initState,action) {\n    switch (action.type) {\n       case LoginSuccess:\n            return {...state, msg:'',redirectTo:getRedirectPath(action.payload),isLogin:true,...action.payload}\n       case REGISTER_SUCCESS:\n            return {...state, msg:'',redirectTo:getRedirectPath(action.payload),isLogin:true,...action.payload}\n       case GET_USER_INFO:\n           return {...state,...action.payload}\n       case LogOutSuccess:\n\t\t   return {...initState,redirectTo:'/login'}\n       case TODO_ERRSHOW:\n            return {...state, isLogin:false, msg:action.msg}\n       default:\n            return state;\n    }\n}\nfunction loginSuccess(obj){\n\tconst {pwd,...data} = obj\n\treturn {type: LoginSuccess, payload:data}\n}\nfunction logOutSuccess(){\n    return { type:LogOutSuccess };\n}\nfunction registerFail(msg) {\n    return {\n        msg,\n        type: TODO_ERRSHOW\n    }\n}\nfunction errorMsg(msg){\n    return { \n        msg, \n        type:toDoFail \n    }\n}\n\nfunction registerSuccess(data) {\n    return {\n        data,\n        type: REGISTER_SUCCESS\n    }\n}\nexport function getUserInfo(userInfo) {\n    return {\n        type: GET_USER_INFO,\n        payload: userInfo\n    }    \n}\nexport function update(data){\n\treturn dispatch=>{\n\t\taxios.post('/user/update',data)\n\t\t\t.then(res=>{\n\t\t\t\tif (res.status==200&&res.data.code===0) {\n\t\t\t\t\tdispatch(loginSuccess(res.data.data))\n\t\t\t\t}else{\n\t\t\t\t\tdispatch(errorMsg(res.data.msg))\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n//login\nexport function login({user,pwd}) {\n    if(!user || !pwd) {\n        return errorMsg('账号密码不能为空')\n    }\n    return dispatch => {\n        axios.post('/user/login',{user,pwd})\n            .then(res => {\n                if(res.status === 200 && res.data.code === 0) {\n                    dispatch(loginSuccess(res.data.data))\n                }else {\n                    dispatch(toDoFail(res.data.msg))\n                }\n            })\n    }\n}\n// register是一个action creator ，返回的action供user这个reducer使用，从而改变state\nexport function register({user,pwd,pwdConfirm,type}) {\n    if(!user || !pwd|| !type) {\n        registerFail('账号密码不能为空')\n    }\n    if(pwd !== pwdConfirm) {\n        registerFail('两次密码不一致')\n    }\n    return dispatch => {\n        axios.post('/user/register',{user,pwd,type})\n            .then(res => {\n                if(res.status === 200 && res.data.code === 0) {\n                    dispatch(registerSuccess(res.data.data))\n                }else {\n                    dispatch(registerFail(res.data.msg))\n                }\n            })\n    }\n}\nexport function logOut() {\n    return dispatch => {\n        axios.get('/user/logOut')\n                .then(res => {\n                if (res.status === 200 && res.data.code === 0) {\n                    dispatch(logOutSuccess(res.data.data))\n                } else {\n                    dispatch(toDoFail(res.data.msg))\n                }\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}